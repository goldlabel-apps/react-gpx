{"version":3,"sources":["gpx-replay/store/system/systemState.js","gpx-replay/store/system/system.reducer.js","gpx-replay/store/reducers.js","gpx-replay/store/initialState.js","gpx-replay/store/configureStore.js","gpx-replay/style/theme.js","gpx-replay/style/textColours.js","gpx-replay/views/Home.jsx","gpx-replay/style/AppShell.Style.js","gpx-replay/GPXReplay.jsx","serviceWorker.js","index.js"],"names":["systemState","updated","Date","now","drawer","open","confirm","params","systemMessage","nav","label","description","id","path","icon","system","state","action","type","bool","combineReducers","initialState","persistConfig","key","storage","rootReducer","persistReducer","reducers","theme","palette","primary","main","secondary","text","light","disabled","hint","divider","lightDivider","white","dark","background","default","paper","appBar","contentFrame","typography","fontFamily","Home","this","props","classes","store","console","log","className","cn","view","pad","Card","card","CardHeader","title","subheader","avatar","Avatar","src","CardContent","Typography","variant","Component","connect","dispatch","withStyles","margin","maxWidth","padding","spacing","withTheme","withRouter","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","GPXReplay","loading","MuiThemeProvider","createMuiTheme","CssBaseline","exact","render","container","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","packageJSON","name","version","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b21c6721.chunk.js","sourcesContent":["export const systemState = {\n  updated: Date.now(),\n  drawer: {\n    open: false\n  },\n  confirm: {\n    open: false,\n    params: null\n  },\n  systemMessage: {\n    open: false,\n    params: null\n  },\n  nav: [\n    {\n      label: `Home`,\n      description: `Home`,\n      id: `content_000001`,\n      path: `/`,\n      icon: `home`\n    },\n    {\n      label: `GitHub`,\n      description: `Where code lives`,\n      id: `content_000006`,\n      icon: `github`,\n      path: `/github`\n    },\n    // {\n    //   label: `WordPress`,\n    //   description: `The world's CMS`,\n    //   id: `content_000005`,\n    //   icon: `wordpress`,\n    //   path: `/wordpress`\n    // },\n    // {\n    //   label: `Storybook`,\n    //   description: `Design System`,\n    //   id: `content_000002`,\n    //   path: `/storybook`,\n    //   icon: `storybook`\n    // },\n    // {\n    //   label: `RESTful API`,\n    //   description: `Node on Firebase Cloud Functions`,\n    //   id: `content_000003`,\n    //   path: `/rest-api`,\n    //   icon: `api`\n    // },\n    {\n      label: `Privacy`,\n      description: `Privacy === Respect`,\n      id: `content_000004`,\n      path: `/privacy`,\n      icon: `privacy`\n    }\n  ]\n};\n","\nimport {systemState} from './systemState';\nexport {systemState};\nconst system = (state = { }, action) => {  \n  \n  switch(action.type) {\n\n    case 'SYSTEM/OPEN/MESSAGE':\n        return {\n          ...state,\n          systemState: {\n            ...state.systemState,\n            updated: Date.now(),\n            systemMessage: {\n              open: true,\n              params: action.params\n            }\n          }\n        };\n\n      case 'SYSTEM/CANCEL/MESSAGE':\n        return {\n          ...state,\n          systemState: {\n            ...state.systemState,\n            updated: Date.now(),\n            confirm: {\n              open: false,\n              params: null\n            }\n          }\n        };\n\n    case 'SYSTEM/OPEN/CONFIRM':\n        // console.log ('SYSTEM/OPEN/CONFIRM', action.params);\n        return {\n          ...state,\n          systemState: {\n            ...state.systemState,\n            updated: Date.now(),\n            confirm: {\n              open: true,\n              params: action.params\n            }\n          }\n        };\n    \n    case 'SYSTEM/CANCEL/CONFIRM':\n        // console.log ('SYSTEM/CANCEL/CONFIRM');\n        return {\n          ...state,\n          systemState: {\n            ...state.systemState,\n            updated: Date.now(),\n            confirm: {\n              open: false,\n              params: null\n            }\n          }\n        };\n\n    case 'SYSTEM/TOGGLE/DRAWER':\n      return {\n        ...state,\n        systemState: {\n          ...state.systemState,\n          updated: Date.now(),\n          drawer: {\n            ...state.systemState.drawer,\n            open: action.bool,\n          }\n        }\n      };\n\n    case 'SYSTEM/RESET':\n      return {\n        systemState\n    };\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default system;\n","import { combineReducers } from 'redux';\nimport system from './system/system.reducer';\n\nexport default combineReducers({\n  system,\n});\n","import { systemState } from './system/system.reducer';\n\nconst initialState = {\n\tsystem: { systemState },\n};\n\nexport default initialState;\n","import { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\nimport initialState from './initialState';\n\nconst persistConfig = {\n  key: \"gpx-replay\",\n  storage,\n};\n\nconst rootReducer = persistReducer(persistConfig, reducers);\n\nexport function configureStore() {\n  return createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(thunk)),\n  )\n};\n","import textColours from \"./textColours\";\n// const { brand } = window.pwaConfig;\nconst primary = `#000`;\nconst secondary = `#222`;\nlet text = textColours.light;\n// if (brand.colours.text === `light`) {\n//   text = textColours.light;\n// }\nconst theme = {\n  palette: {\n    primary: {\n      main: primary || \"#222\"\n    },\n    secondary: {\n      main: secondary || \"#333\"\n    },\n    text,\n    background: {\n      default: secondary,\n      paper: primary,\n      appBar: secondary,\n      contentFrame: primary\n    }\n  },\n  typography: {\n    fontFamily: '\"Helvetica\", sans-serif'\n  }\n};\n\nexport default theme;\n","const textColours = {\n  light: {\n    primary: \"rgba(255, 255, 255, 0.87)\",\n    secondary: \"rgba(255, 255, 255, 0.54)\",\n    disabled: \"rgba(255, 255, 255, 0.38)\",\n    hint: \"rgba(255, 255, 255, 0.38)\",\n    icon: \"rgba(255, 255, 255, 0.38)\",\n    divider: \"rgba(255, 255, 255, 0.12)\",\n    lightDivider: \"rgba(255, 255, 255, 0.075)\",\n    white: \"#fff\"\n  },\n  dark: {\n    primary: \"rgba(0, 0, 0, 0.87)\",\n    secondary: \"rgba(0, 0, 0, 0.54)\",\n    disabled: \"rgba(0, 0, 0, 0.38)\",\n    hint: \"rgba(0, 0, 0, 0.38)\",\n    icon: \"rgba(0, 0, 0, 0.38)\",\n    divider: \"rgba(0, 0, 0, 0.12)\",\n    lightDivider: \"rgba(0, 0, 0, 0.075)\",\n    white: \"#fff\"\n  }\n};\n\nexport default textColours;\n","import React, { Component } from 'react';\nimport { withRouter } from \"react-router\";\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport cn from 'classnames';\nimport { styles } from '../style/AppShell.Style';\nimport {\n    Avatar,\n    Card,\n    CardHeader,\n    CardContent,\n    Typography\n} from '@material-ui/core/';\n// import IconRefresh from '@material-ui/icons/RefreshTwoTone';\n\nclass Home extends Component {\n\n    render() {\n        const {\n            classes,\n            // history,\n            store\n        } = this.props;\n        console.log('store', store)\n\n        return (\n            <div className={cn(classes.view)}>\n                <div className={cn(classes.pad)}>\n                    <Card className={classes.card}>\n                        <CardHeader\n                            title={`GPX Replay`}\n                            subheader=\"Got location data?\"\n                            avatar={<Avatar src={`/logo192.png`} />}\n                        />\n                        <CardContent>\n                            <Typography variant={`body1`}>\n                                GPX, or GPS Exchange Format, is an XML schema designed as a common GPS data format for software applications. It can be used to describe waypoints, tracks, and routes. The format is open and can be used without the need to pay license fees. Location data (and optionally elevation, time, and other information) is stored in tags and can be interchanged between GPS devices and software. Common software applications for the data include viewing tracks projected onto various map sources, annotating maps, and geotagging photographs based on the time they were taken.\n                            </Typography>\n                        </CardContent>\n\n                    </Card>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (store) => {\n    return {\n        store\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        // systemToggleTopAppBar: (bool) => dispatch(systemToggleTopAppBar(bool)),\n    };\n};\n\nexport default (\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(withStyles(styles, { withTheme: true })(withRouter(Home)))\n);\n\n/*\n\n\n<CardMedia\n                            className={classes.media}\n                            image={`/logo512.png`}\n                            title={`Firebase/Node REST API`}\n                        />\n*/","\nexport const styles = theme => ({\n    view: {\n        margin: 'auto',\n        maxWidth: 500,\n    },\n    card: {\n        padding: theme.spacing(),\n        margin: theme.spacing(),\n        // border: '1px solid white',\n    }\n});\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { persistStore } from \"redux-persist\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/es/integration/react\";\nimport { configureStore } from \"./store/configureStore\";\nimport { withStyles } from '@material-ui/styles';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport theme from './style/theme';\n// import cn from 'classnames';\nimport {\n    CssBaseline,\n} from '@material-ui/core/';\nimport Home from './views/Home';\n\nconst styles = () => ({\n    container: {\n        margin: 'auto',\n        maxWidth: 800,\n    }\n});\nconst store = configureStore();\nconst persistor = persistStore(store);\n\nclass GPXReplay extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <PersistGate loading={null} persistor={persistor}>\n                    <MuiThemeProvider theme={createMuiTheme(theme)}>\n                        <CssBaseline />\n                        <Router>\n                            <Switch>\n                                <Route exact path=\"/\" render={props => {\n                                    return (<Home />);\n                                }} />\n                            </Switch>\n                        </Router>\n                    </MuiThemeProvider>\n                </PersistGate>\n            </Provider>\n        );\n    }\n}\n\nexport default withStyles(styles)(GPXReplay);\n","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  window.location.hostname === '[::1]' ||\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New version available'\n              );\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl)\n    .then(response => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import packageJSON from \"../package.json\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GPXReplay } from './gpx-replay';\nimport * as serviceWorker from './serviceWorker';\n\nconsole.log(`${packageJSON.name} ${packageJSON.version}`);\n// (${process.env.REACT_APP_ENV})\n\nReactDOM.render(<GPXReplay />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}